{"version":3,"sources":["components/sub-forum/sub-forum.component.jsx","components/sub-forums-list/sub-forums-list.component.jsx","components/header/header.component.jsx","components/footer/footer.component.jsx","App.js","serviceWorker.js","index.js"],"names":["SubForum","forumName","Paper","elevation","className","SubForumsList","Grid","container","spacing","item","xs","sm","lg","Header","toggleDrawer","state","drawerHidden","setState","Button","variant","onClick","this","Drawer","anchor","open","onClose","ListItem","button","Divider","React","Component","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+YAceA,G,MARE,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UACjB,OACA,kBAACC,EAAA,EAAD,CAAOC,UAAW,EAAGC,UAAU,aAC7B,4BAAKH,MCuBMI,G,MAzBO,kBACpB,yBAAKD,UAAU,mBACb,kBAACE,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACvB,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC5B,kBAAC,EAAD,CAAUX,UAAU,eAEtB,kBAACK,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAKC,GAAI,EAAGC,GAAI,GAC7B,kBAAC,EAAD,CAAUX,UAAU,cAEtB,kBAACK,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAKC,GAAI,EAAGC,GAAI,GAC7B,kBAAC,EAAD,CAAUX,UAAU,eAEtB,kBAACK,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAKC,GAAI,EAAGC,GAAI,GAC7B,kBAAC,EAAD,CAAUX,UAAU,gBAEtB,kBAACK,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAKC,GAAI,EAAGC,GAAI,GAC7B,kBAAC,EAAD,CAAUX,UAAU,gBAEtB,kBAACK,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAKC,GAAI,EAAGC,GAAI,GAC7B,kBAAC,EAAD,CAAUX,UAAU,mB,gCCoBbY,G,wDAxCb,aAAe,IAAD,8BACZ,gBAMFC,aAAe,WACT,EAAKC,MAAMC,aACb,EAAKC,SAAS,CAAED,cAAc,IAE9B,EAAKC,SAAS,CAAED,cAAc,KAThC,EAAKD,MAAQ,CACXC,cAAc,GAHJ,E,qDAgBZ,OACE,4BAAQZ,UAAU,UAChB,6BACE,kBAACc,EAAA,EAAD,CAAQC,QAAQ,WAAWC,QAASC,KAAKP,cAAzC,WACA,wBAAIV,UAAU,SAAd,yBACA,kBAACkB,EAAA,EAAD,CACEH,QAAQ,YACRI,OAAO,OACPC,KAAMH,KAAKN,MAAMC,aACjBS,QAASJ,KAAKP,cAEd,kBAACY,EAAA,EAAD,CAAUC,QAAM,GAAhB,WACA,kBAACD,EAAA,EAAD,CAAUC,QAAM,GAAhB,WACA,kBAACD,EAAA,EAAD,CAAUC,QAAM,GAAhB,YACA,kBAACD,EAAA,EAAD,CAAUC,QAAM,GAAhB,qBACA,kBAACC,EAAA,EAAD,MACA,kBAACF,EAAA,EAAD,CAAUC,QAAM,EAACP,QAASC,KAAKP,cAA/B,gB,GAjCSe,IAAMC,YCKZC,G,MANA,WACd,OACE,gCCoBYC,E,uKAbX,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,0BAAM5B,UAAU,QACd,wBAAIA,UAAU,aAAd,cACA,kBAAC,EAAD,OAEF,kBAAC,EAAD,W,GATUyB,IAAMC,WCCJG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e24917e4.chunk.js","sourcesContent":["import React from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport '@material-ui/system'\r\n\r\nimport './sub-forum.styles.scss'\r\n\r\nconst SubForum = ({forumName}) => {\r\n  return (\r\n  <Paper elevation={2} className='sub-forum'>\r\n    <h3>{forumName}</h3>\r\n  </Paper>\r\n  )\r\n}\r\n\r\nexport default SubForum;","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid'\r\n\r\nimport SubForum from '../sub-forum/sub-forum.component';\r\n\r\nimport './sub-forums-list.styles.scss';\r\n\r\nconst SubForumsList = () => (\r\n  <div className='sub-forums-list'>\r\n    <Grid container spacing={3}>\r\n      <Grid item xs={12} sm={6} lg={4}>\r\n        <SubForum forumName=\"Front-End\" />\r\n      </Grid>\r\n      <Grid item xs={12}  sm={6} lg={4}>\r\n        <SubForum forumName='Back-End' />\r\n      </Grid>\r\n      <Grid item xs={12}  sm={6} lg={4}>\r\n        <SubForum forumName='Databases' />\r\n      </Grid>\r\n      <Grid item xs={12}  sm={6} lg={4}> \r\n        <SubForum forumName='HTML & CSS' />\r\n      </Grid >\r\n      <Grid item xs={12}  sm={6} lg={4}>\r\n        <SubForum forumName='JavaScript' />\r\n      </Grid>\r\n      <Grid item xs={12}  sm={6} lg={4}>\r\n        <SubForum forumName='Off-Topic' />\r\n      </Grid>\r\n    </Grid>\r\n  </div> \r\n)\r\n\r\nexport default SubForumsList;","import React from 'react';\r\nimport { Drawer, ListItem, Button, Divider } from '@material-ui/core'\r\n\r\nimport './header.styles.scss'\r\n\r\nclass Header extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      drawerHidden: false,\r\n    };\r\n  }\r\n\r\n  toggleDrawer = () => {\r\n    if (this.state.drawerHidden) {\r\n      this.setState({ drawerHidden: false })\r\n    } else {\r\n      this.setState({ drawerHidden: true })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <header className='header'>\r\n        <div>\r\n          <Button variant='outlined' onClick={this.toggleDrawer}>Options</Button>\r\n          <h1 className='title'>WEB DEVELOPMENT FORUM</h1>\r\n          <Drawer\r\n            variant='temporary'\r\n            anchor='left'\r\n            open={this.state.drawerHidden}\r\n            onClose={this.toggleDrawer}\r\n          >\r\n            <ListItem button >Sign In</ListItem>\r\n            <ListItem button >Sign Up</ListItem>\r\n            <ListItem button >Settings</ListItem>\r\n            <ListItem button >Fuck This Shit Up</ListItem>\r\n            <Divider />\r\n            <ListItem button onClick={this.toggleDrawer}>Close</ListItem>\r\n          </Drawer>\r\n        </div>\r\n      </header>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nimport './footer.styles.scss'\r\n\r\nconst Footer = () => {\r\n return (\r\n   <div></div>\r\n );\r\n}\r\n\r\nexport default Footer;","import React from \"react\";\r\n// import { Drawer, Button } from \"@material-ui/core\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nimport \"./App.css\";\r\nimport \"./Home.css\";\r\n\r\nimport SubForumsList from \"./components/sub-forums-list/sub-forums-list.component\";\r\nimport Header from \"./components/header/header.component\";\r\nimport Footer from \"./components/footer/footer.component\";\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <BrowserRouter>\r\n        <Header />\r\n        <main className=\"main\">\r\n          <h2 className=\"sub-title\">Sub-Forums</h2>\r\n          <SubForumsList />\r\n        </main>\r\n        <Footer />\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}